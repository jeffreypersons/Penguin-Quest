using UnityEngine;
using UnityEngine.InputSystem;
using PenguinQuest.Generated;


namespace PenguinQuest.Data
{
    /*
    Input receiver that maps gameplay control input to the game event system.

    Assumes that an autogenerated c# class is provided that maps to in-editor-configured
    player input/control settings.
    */
    [System.Serializable]
    [AddComponentMenu("GameplayInputReciever")]
    public class GameplayInputReciever : MonoBehaviour
    {
        private float       xInput;
        private InputAction moveHorizontalAction;
        private InputAction jumpUpAction;
        private InputAction standUpAction;
        private InputAction lieDownAction;
        private InputAction useAction;
        private InputAction fireAction;

        private PlayerControls generatedPlayerControls;

        // todo: completely remove the below in favor of event triggers
        public int  HorizontalAxis              { get; set; }
        public bool MoveHorizontalHeldThisFrame { get; set; }
        public bool JumpUpHeldThisFrame         { get; set; }
        public bool StandUpHeldThisFrame        { get; set; }
        public bool LieDownHeldThisFrame        { get; set; }
        
        public bool FireHeldThisFrame           { get; set; }
        public bool UseHeldThisFrame            { get; set; }
        
        private void Init()
        {
            generatedPlayerControls = new PlayerControls();

            // todo: bind these actions to GameEvents
            HorizontalAxis       = 0;
            moveHorizontalAction = generatedPlayerControls.Gameplay.MoveHorizontal;
            jumpUpAction         = generatedPlayerControls.Gameplay.JumpUp;
            standUpAction        = generatedPlayerControls.Gameplay.StandUp;
            lieDownAction        = generatedPlayerControls.Gameplay.LieDown;
            fireAction           = generatedPlayerControls.Gameplay.Fire;
            useAction            = generatedPlayerControls.Gameplay.Use;
        }

        void OnEnable()
        {
            generatedPlayerControls.Gameplay.Enable();
        }

        void OnDisable()
        {
            generatedPlayerControls.Gameplay.Disable();
        }

        void Awake()
        {
            Init();
        }

        void Update()
        {
            // todo: ensure floats are getting mapped to ints correctly for axis...
            xInput = moveHorizontalAction.ReadValue<float>();
            HorizontalAxis = (int)xInput;

            // todo: make these trigger GameEvents instead of polling every frame
            MoveHorizontalHeldThisFrame = xInput != 0;
            JumpUpHeldThisFrame         = jumpUpAction .triggered;
            StandUpHeldThisFrame        = standUpAction.triggered;
            LieDownHeldThisFrame        = lieDownAction.triggered;
            UseHeldThisFrame            = useAction    .triggered;
            FireHeldThisFrame           = fireAction   .triggered;
        }
    }
}
