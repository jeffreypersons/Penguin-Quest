using UnityEngine;
using UnityEngine.InputSystem;
using PenguinQuest.Generated;


namespace PenguinQuest.Data
{
    /*
    Input receiver that maps gameplay control input to the game event system.

    Assumes that an autogenerated c# class is provided that maps to in-editor-configured
    player input/control settings.
    */
    [System.Serializable]
    [AddComponentMenu("GameplayInputReceiver")]
    public class GameplayInputReceiver : MonoBehaviour
    {
        private PlayerControls generatedPlayerControls;

        private InputAction MoveHorizontal => generatedPlayerControls.Gameplay.MoveHorizontal;
        private InputAction JumpUp         => generatedPlayerControls.Gameplay.JumpUp;
        private InputAction StandUp        => generatedPlayerControls.Gameplay.StandUp;
        private InputAction LieDown        => generatedPlayerControls.Gameplay.LieDown;
        private InputAction Use            => generatedPlayerControls.Gameplay.Fire;
        private InputAction Fire           => generatedPlayerControls.Gameplay.Use;

        void Awake()
        {
            generatedPlayerControls = new PlayerControls();
        }


        void OnEnable()
        {
            generatedPlayerControls.Gameplay.Enable();
            MoveHorizontal.started   += OnMoveHorizontalStarted;
            MoveHorizontal.canceled  += OnMoveHorizontalStopped;
            JumpUp        .performed += OnJumpUp;
            StandUp       .performed += OnStandUp;
            LieDown       .performed += OnLieDown;
            Use           .performed += OnUse;
            Fire          .performed += OnFire;
        }

        void OnDisable()
        {
            generatedPlayerControls.Gameplay.Disable();
            MoveHorizontal.started   -= OnMoveHorizontalStarted;
            MoveHorizontal.canceled  -= OnMoveHorizontalStopped;
            JumpUp        .performed -= OnJumpUp;
            StandUp       .performed -= OnStandUp;
            LieDown       .performed -= OnLieDown;
            Use           .performed -= OnUse;
            Fire          .performed -= OnFire;
        }

        private void OnMoveHorizontalStarted(InputAction.CallbackContext context)
        {
            int direction = context.action.ReadValue<float>() < 0.00f ? -1 : 1;
            GameEventCenter.startHorizontalMoveCommand.Trigger(direction);
        }

        private void OnMoveHorizontalStopped(InputAction.CallbackContext _)
        {
            GameEventCenter.stopHorizontalMoveCommand.Trigger("Received input to stop horizontal movement");
        }

        private void OnJumpUp(InputAction.CallbackContext _)
        {
            GameEventCenter.jumpCommand.Trigger("Received jump up input");
        }

        private void OnStandUp(InputAction.CallbackContext _)
        {
            GameEventCenter.standupCommand.Trigger("Received stand up input");
        }

        private void OnLieDown(InputAction.CallbackContext _)
        {
            GameEventCenter.lieDownCommand.Trigger("Received lie down input");
        }

        private void OnUse(InputAction.CallbackContext _)
        {
            GameEventCenter.useCommand.Trigger("Received use input");
        }

        private void OnFire(InputAction.CallbackContext _)
        {
            GameEventCenter.fireCommand.Trigger("Received fire input");
        }
    }
}
