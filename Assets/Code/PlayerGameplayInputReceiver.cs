using UnityEngine;
using UnityEngine.InputSystem;
using PQ.Generated;


namespace PQ
{
    /*
    Input receiver that maps gameplay control input to the game event system.

    Assumes that an autogenerated c# class is provided that maps to in-editor-configured
    player input/control settings.
    */
    [System.Serializable]
    [AddComponentMenu("PlayerGameplayInputReceiver")]
    public class PlayerGameplayInputReceiver : MonoBehaviour
    {
        private PlayerControls _generatedPlayerControls;
        private GameEventCenter _eventCenter;

        private HorizontalInput _horizontalInputState;
        private InputAction _moveHorizontal;
        private InputAction _jumpUp;
        private InputAction _standUp;
        private InputAction _lieDown;
        private InputAction _use;
        private InputAction _fire;

        void Awake()
        {
            _eventCenter = GameEventCenter.Instance;

            PlayerControls controls = new PlayerControls();

            _generatedPlayerControls = controls;
            _moveHorizontal = controls.Gameplay.MoveHorizontal;
            _jumpUp         = controls.Gameplay.JumpUp;
            _standUp        = controls.Gameplay.StandUp;
            _lieDown        = controls.Gameplay.LieDown;
            _use            = controls.Gameplay.Fire;
            _fire           = controls.Gameplay.Use;

            _horizontalInputState = HorizontalInput.None;
        }


        void OnEnable()
        {
            _generatedPlayerControls.Gameplay.Enable();
            _moveHorizontal.started   += OnMoveHorizontalChanged;
            _moveHorizontal.canceled  += OnMoveHorizontalChanged;
            _jumpUp        .performed += OnJumpUp;
            _standUp       .performed += OnStandUp;
            _lieDown       .performed += OnLieDown;
            _use           .performed += OnUse;
            _fire          .performed += OnFire;
        }

        void OnDisable()
        {
            _generatedPlayerControls.Gameplay.Disable();
            _moveHorizontal.started   -= OnMoveHorizontalChanged;
            _moveHorizontal.canceled  -= OnMoveHorizontalChanged;
            _jumpUp        .performed -= OnJumpUp;
            _standUp       .performed -= OnStandUp;
            _lieDown       .performed -= OnLieDown;
            _use           .performed -= OnUse;
            _fire          .performed -= OnFire;
        }

        private void OnMoveHorizontalChanged(InputAction.CallbackContext context)
        {
            HorizontalInput mappedValue;
            float rawValue = context.action.ReadValue<float>();
            if (Mathf.Approximately(rawValue, 0))
            {
                mappedValue = HorizontalInput.None;
            }
            else if (rawValue < 0)
            {
                mappedValue = HorizontalInput.Left;
            }
            else
            {
                mappedValue = HorizontalInput.Right;
            }

            if (mappedValue != _horizontalInputState)
            {
                _eventCenter.movementInputChanged.Trigger(mappedValue);
                _horizontalInputState = mappedValue;
            }
        }

        private void OnJumpUp(InputAction.CallbackContext _)
        {
            _eventCenter.jumpCommand.Trigger("Received jump up input");
        }

        private void OnStandUp(InputAction.CallbackContext _)
        {
            _eventCenter.standUpCommand.Trigger("Received stand up input");
        }

        private void OnLieDown(InputAction.CallbackContext _)
        {
            _eventCenter.lieDownCommand.Trigger("Received lie down input");
        }

        private void OnUse(InputAction.CallbackContext _)
        {
            _eventCenter.useCommand.Trigger("Received use input");
        }

        private void OnFire(InputAction.CallbackContext _)
        {
            _eventCenter.fireCommand.Trigger("Received fire input");
        }
    }
}
